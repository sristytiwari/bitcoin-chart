{"version":3,"sources":["home/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["HomePage","props","getData","fetch","method","headers","then","res","json","response","formatAndSetData","setState","allData","state","payload","last","timestamp","chartsjs","chartInstance","data","labels","push","Moment","Date","format","datasets","update","preservation","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","React","createRef","setInterval","this","style","margin","height","options","maintainAspectRatio","ref","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2OAIqBA,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqCRC,QAAU,WACRC,MAAM,gEAAiE,CACrEC,OAAQ,MAERC,QAAS,CACP,WAAY,iDAGbC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACL,EAAKC,iBAAiBD,GACtB,EAAKE,SAAS,CACZC,QAAQ,GAAD,mBAAM,EAAKC,MAAMD,SAAjB,CAA0BH,UAlDtB,EAyDnBC,iBAAmB,SAACI,GAClB,IAAIC,EAAOD,EAAQC,KACfC,EAAYF,EAAQE,UACxB,EAAKC,SAASC,cAAcC,KAAKC,OAAOC,KAAKC,IAAO,IAAIC,KAAKP,IAAYQ,OAAO,kBAChF,EAAKP,SAASC,cAAcC,KAAKM,SAAS,GAAGN,KAAKE,KAAKN,GACvD,EAAKE,SAASC,cAAcQ,OAAO,CACjCC,cAAc,KA7DhB,EAAKd,MAAQ,CACXD,QAAS,IAGX,EAAKO,KAAO,CACVC,OAAQ,GACRK,SAAU,CACR,CACEG,MAAO,eACPC,MAAM,EACNC,YAAa,GACbC,gBAAiB,uBACjBC,YAAa,qBACbC,eAAgB,OAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,QACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,EAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB1B,KAAM,MAKZ,EAAKF,SAAW6B,IAAMC,YAjCL,E,gEAoCjBC,YAAYC,KAAK/C,QAAS,O,+BA+BlB,IAAD,OACP,OACE,yBAAKgD,MAAO,CAACC,OAAQ,KACnB,kBAAC,IAAD,CACEhC,KAAM8B,KAAK9B,KACXiC,OAAQ,IACRC,QAAS,CAAEC,qBAAqB,GAChCC,IAAK,SAACtC,GAAe,EAAKA,SAAWA,U,GA3ETuC,aCSvBC,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjE,MAAK,SAAAkE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,6EEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.09c1c85a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport Moment from 'moment';\n\nexport default class HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allData: [],\n      \n    };\n    this.data = {\n      labels: [],\n      datasets: [\n        {\n          label: \"Bitcoin live\",\n          fill: false,\n          lineTension: 0.1,\n          backgroundColor: \"rgba(75,192,192,0.4)\",\n          borderColor: \"rgba(75,192,192,1)\",\n          borderCapStyle: \"butt\",\n          borderDash: [],\n          borderDashOffset: 0.0,\n          borderJoinStyle: \"miter\",\n          pointBorderColor: \"rgba(75,192,192,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          pointHoverBackgroundColor: \"rgba(75,192,192,1)\",\n          pointHoverBorderColor: \"rgba(220,220,220,1)\",\n          pointHoverBorderWidth: 2,\n          pointRadius: 1,\n          pointHitRadius: 10,\n          data: [],\n        },\n      ],\n    }\n\n    this.chartsjs = React.createRef();\n  }\n  componentDidMount() {\n    setInterval(this.getData, 2000);\n  }\n  getData = () => {\n    fetch(\"https://apiv2.bitcoinaverage.com/indices/global/ticker/BTCUSD\", {\n      method: \"GET\",\n\n      headers: {\n        \"x-ba-key\": \"ZDJjOWViNDJkZDY5NGJmNTgwMGFiNWU2YzI5M2M2YTc\",\n      },\n    })\n      .then((res) => res.json())\n      .then((response) => {\n        this.formatAndSetData(response);\n        this.setState({\n          allData: [...this.state.allData, response],\n        });\n      });\n  };\n\n  \n\n  formatAndSetData = (payload) => {\n    let last = payload.last;\n    let timestamp = payload.timestamp;\n    this.chartsjs.chartInstance.data.labels.push(Moment(new Date(timestamp)).format('MMM Do h:mm A'));\n    this.chartsjs.chartInstance.data.datasets[0].data.push(last);\n    this.chartsjs.chartInstance.update({\n      preservation: true,\n  });\n  };\n\n  render() {\n    return (\n      <div style={{margin: 50}}>\n        <Line\n          data={this.data}\n          height={400}\n          options={{ maintainAspectRatio: false }}\n          ref={(chartsjs) => { this.chartsjs = chartsjs; }}\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomePage from './home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}